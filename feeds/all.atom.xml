<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pythux</title><link href="http://remusao.github.com/" rel="alternate"></link><link href="http://remusao.github.com/feeds/all.atom.xml" rel="self"></link><id>http://remusao.github.com/</id><updated>2014-11-26T15:00:00+01:00</updated><entry><title>"[py.test] Paramaterize tests with external data"</title><link href="http://remusao.github.com/pytest-paramaterize-tests-with-external-data.html" rel="alternate"></link><updated>2014-11-26T15:00:00+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2014-11-26:pytest-paramaterize-tests-with-external-data.html</id><summary type="html">&lt;p&gt;I recently began to make heavy use of &lt;a href="http://pytest.org/latest/"&gt;py.test&lt;/a&gt;
in my day-to-day Python development. It's a wonderful tool, but I won't
explain to you every features it provides and why it's awesome. Instead,
I'll explain how I managed to cleanly externalize the data used for my
tests in external files (that can be of any format: yaml, json, python
files). The idea here is to &lt;em&gt;separate the code that performs the test&lt;/em&gt;,
from the &lt;em&gt;input data used to perform the test&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test_feature.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_my_feature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one_example&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;one_example&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;data_feature.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;tests&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;test1&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;...&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;test2&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;First solution: yield&lt;/h2&gt;
&lt;p&gt;The first solution would be to use &lt;code&gt;yield&lt;/code&gt; to generate tests, as it's supported
by &lt;code&gt;py.test&lt;/code&gt; (as long as you don't want to use fixtures in your test function...).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# perform your test&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_feature&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generate_tests&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, &lt;code&gt;py.test&lt;/code&gt; will understand that &lt;code&gt;test_feature&lt;/code&gt; will yield several tests and that
the &lt;code&gt;check&lt;/code&gt; function must be used to perform the test, so it is almost equivalent to do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_feature&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generate_tests&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Except that in this last snippet of code, the tests will stop as soon as one fails.
With the &lt;code&gt;yield&lt;/code&gt;-version, every tests will be ran even if some fail. This is useful
if you have lot of tests, and you want to know which ones fail (not just the first one).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: if you want to use fixtures with your &lt;code&gt;test_feature&lt;/code&gt; functions, it breaks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# perform your test&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_feature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fixture&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generate_tests&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will tell you that &lt;code&gt;test_feature&lt;/code&gt; expects one argument but that none are provided.&lt;/p&gt;
&lt;p&gt;End of the story...
Wait, no, &lt;code&gt;py.test&lt;/code&gt; is awesome remember? So there must be a solution!&lt;/p&gt;
&lt;h2&gt;Parametrization&lt;/h2&gt;
&lt;p&gt;One of the cool features of &lt;code&gt;py.test&lt;/code&gt; is the ability to add parameters on our
tests or fixtures, so that a test is ran once for each parameter (from &lt;a href="http://pytest.org/latest/parametrize.html"&gt;py.test doc&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# content of test_expectation.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="nd"&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input,expected&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3+5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2+4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6*9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;===========================&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;============================&lt;/span&gt;
&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;

&lt;span class="n"&gt;test_expectation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;

&lt;span class="o"&gt;=================================&lt;/span&gt; &lt;span class="n"&gt;FAILURES&lt;/span&gt; &lt;span class="o"&gt;=================================&lt;/span&gt;
&lt;span class="n"&gt;____________________________&lt;/span&gt; &lt;span class="n"&gt;test_eval&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;_____________________________&lt;/span&gt;

&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;6*9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

    &lt;span class="nd"&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input,expected&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3+5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2+4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6*9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;       &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;
&lt;span class="n"&gt;E&lt;/span&gt;       &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="n"&gt;E&lt;/span&gt;        &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;6*9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;test_expectation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;
&lt;span class="o"&gt;====================&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;====================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So here our &lt;code&gt;test_eval&lt;/code&gt; function has been called &lt;em&gt;three times&lt;/em&gt;. Once for each parameter.
Great! But what if you want your parameters to come from another file, or from a function.
In other words, what if you want to &lt;em&gt;dynamically parametrize&lt;/em&gt; your function?&lt;/p&gt;
&lt;h2&gt;Hooks at the rescue&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pytest.org/latest/plugins.html#well-specified-hooks"&gt;Hooks&lt;/a&gt; allow you to plug code into &lt;code&gt;py.test&lt;/code&gt; at diffent stages of the test run.
The hook that can be useful for us is &lt;code&gt;pytest_generate_tests&lt;/code&gt; that will allow
to generate several calls to the same test function, but with different arguments
(from &lt;a href="http://pytest.org/latest/funcargs.html#basic-generated-test-example"&gt;py.test doc&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# content of test_example.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pytest_generate_tests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metafunc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;numiter&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;metafunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;funcargnames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;metafunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;numiter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numiter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;numiter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;test_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="o"&gt;===========================&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;============================&lt;/span&gt;
&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;linux2&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;collecting&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;

&lt;span class="n"&gt;test_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.........&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;

&lt;span class="o"&gt;=================================&lt;/span&gt; &lt;span class="n"&gt;FAILURES&lt;/span&gt; &lt;span class="o"&gt;=================================&lt;/span&gt;
&lt;span class="n"&gt;_______________________________&lt;/span&gt; &lt;span class="n"&gt;test_func&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;_______________________________&lt;/span&gt;

&lt;span class="n"&gt;numiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numiter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;       &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;numiter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;E&lt;/span&gt;       &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="n"&gt;test_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;
&lt;span class="o"&gt;====================&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.02&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;====================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great, so the last things to do is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Detect functions that make use of a fixture whose name starts with &lt;code&gt;data_&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Load the corresponding file or resource for the test source&lt;/li&gt;
&lt;li&gt;Parametrize the function with each of the data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, here is what you can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pytest_generate_tests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metafunc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; This allows us to load tests from external files by&lt;/span&gt;
&lt;span class="sd"&gt;    parametrizing tests with each test case found in a data_X&lt;/span&gt;
&lt;span class="sd"&gt;    file &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;metafunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixturenames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;data_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c"&gt;# Load associated test data&lt;/span&gt;
            &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_tests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;metafunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the &lt;code&gt;load_tests&lt;/code&gt; function takes as argument the name of the fixture &lt;code&gt;data_X&lt;/code&gt;
and will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Load the corresponding file&lt;/li&gt;
&lt;li&gt;Extract the different test-cases&lt;/li&gt;
&lt;li&gt;Return a list of all the cases&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, if your tests are stored in a Python file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;importlib&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_tests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Load module which contains test data&lt;/span&gt;
    &lt;span class="n"&gt;tests_module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;importlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;import_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# Tests are to be found in the variable `tests` of the module&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tests_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The data file (&lt;code&gt;data_my_feature.py&lt;/code&gt;) could look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The test function will then be invoked for each case.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_feature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_my_feature&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;data_my_feature&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here it's not really interesting, but the benefits are numerous:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;storing your data in a database, or in yaml/json formatted files, or whatever&lt;/li&gt;
&lt;li&gt;other people can add tests to your project, without having to dig into the code&lt;/li&gt;
&lt;li&gt;provide a common format to define tests in external files&lt;/li&gt;
&lt;li&gt;reuse the same data for several tests&lt;/li&gt;
&lt;li&gt;the data is not hard-coded in Python source-code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TL;DR: &lt;code&gt;py.test&lt;/code&gt; is awesome. Make tests. Get data for your tests from external sources.&lt;/p&gt;</summary></entry><entry><title>"Decompressing BZipped files with Julia"</title><link href="http://remusao.github.com/decompressing-bzipped-files-with-julia.html" rel="alternate"></link><updated>2014-07-22T22:33:41+02:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2014-07-22:decompressing-bzipped-files-with-julia.html</id><summary type="html">&lt;p&gt;I'm currently working with Wikipedia dumps, and to save space, it's a good thing to make scripts that read directly content from (and write results to) BZipped files.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Tests where executed on my personnal computer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i7&lt;/li&gt;
&lt;li&gt;16GB of ram&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a small wikipedia dump of &lt;em&gt;407MB&lt;/em&gt;. All timings are in &lt;em&gt;seconds&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;bzcat alone&lt;/h2&gt;
&lt;p&gt;To have a point of comparison, I decompressed the dump using &lt;em&gt;bzcat&lt;/em&gt; alone. The timing is &lt;em&gt;64 seconds&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;1&amp;gt;/dev/null bzcat wikidump.xml.bz2
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using Python&lt;/h2&gt;
&lt;p&gt;It's easy enough with &lt;em&gt;Python&lt;/em&gt; thanks to the &lt;code&gt;bz2&lt;/code&gt; module that allows to transparently manipulate a compressed file as if it were a normal opened file. Before jumping to Julia, let see how it is done in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bz2&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;in_stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bz2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BZ2File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;in_stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;in_stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nothing easier, it takes &lt;em&gt;85 seconds&lt;/em&gt; to run.&lt;/p&gt;
&lt;h2&gt;What about Julia?&lt;/h2&gt;
&lt;p&gt;Since I really love &lt;em&gt;Julia&lt;/em&gt; language, I was tempted to do the same with Julia. Here are the differents solutions that I went through, with their respective timings.&lt;/p&gt;
&lt;h3&gt;Using bz2 Python module through PyCall&lt;/h3&gt;
&lt;p&gt;The first naive option is to use the original module from Python. It's easy enough using the &lt;code&gt;PyCall&lt;/code&gt; module. We can install it like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;julia&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PyCall&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;julia&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;PyCall&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pyimport&lt;/span&gt; &lt;span class="n"&gt;bz2&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nf"&gt; main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;in_stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bz2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BZ2File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ARGS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;in_stream&lt;/span&gt;
        &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;in_stream&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But then we hit the wall... timing is: &lt;em&gt;1352 seconds&lt;/em&gt;. This is likely due to the conversion between &lt;em&gt;Python&lt;/em&gt; and &lt;em&gt;Julia&lt;/em&gt; datatypes. So not the best option for a data-intensive usage.&lt;/p&gt;
&lt;h3&gt;Piping result of bzcat to Julia&lt;/h3&gt;
&lt;p&gt;The second option that came to my mind was: "why not using &lt;em&gt;bzcat&lt;/em&gt;?". It's easy enough, we just have to read from &lt;code&gt;STDIN&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nf"&gt; main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;eachline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STDIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the invocation:
{% highlight sh %}
$ bzcat wikidump.xml.bz2 | julia bz2_bench.jl&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;Timing&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt; &lt;span class="nx"&gt;reasonable&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;72&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;So&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;less&lt;/span&gt; &lt;span class="nx"&gt;than&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="nx"&gt;shown&lt;/span&gt; &lt;span class="nx"&gt;above&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;But&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;satisfactory&lt;/span&gt; &lt;span class="nx"&gt;enough&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Why&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;wonderful&lt;/span&gt; &lt;span class="nx"&gt;capabilities&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Julia&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;external&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;


&lt;span class="err"&gt;###&lt;/span&gt; &lt;span class="nx"&gt;Invoking&lt;/span&gt; &lt;span class="nx"&gt;bzcat&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;Julia&lt;/span&gt;

&lt;span class="nx"&gt;It&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;easy&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;invoke&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;inside&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Julia&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;backquotes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;``&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;``&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="nx"&gt;between&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Let&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="nx"&gt;julia&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ARGS&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;bzcat&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script is equivalent to: &lt;code&gt;bzcat wikidump.xml.bz2&lt;/code&gt;, but it's quite impressive to see how easy it is to do this inside a Julia script.
This time is about &lt;em&gt;66 seconds&lt;/em&gt;, more or less the same than with the external piping from &lt;code&gt;bzcat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But it would be useful to get lines of contents from the stream, like it was in the original &lt;em&gt;Python&lt;/em&gt; script. For this task, &lt;em&gt;Julia&lt;/em&gt; standard library offers a multitudes of handy functions. The one we will use is &lt;code&gt;readsfrom&lt;/code&gt; that returns two things: stdout of the given process, and the process itself. Here it is in action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nf"&gt; main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ARGS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readsfrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`bzcat $(file)`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;eachline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Timing is now about &lt;em&gt;74 seconds&lt;/em&gt;, this is &lt;em&gt;10 seconds&lt;/em&gt; faster than the first &lt;em&gt;Python&lt;/em&gt; version. But we don't rely on a module. Instead, we make use of the ability to play with command invocations, stream pipings, and the like that &lt;em&gt;Julia&lt;/em&gt; allows.&lt;/p&gt;
&lt;h2&gt;Timings&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Bench" src="{{" title="filename }}/images/bz2-julia-bench.png" /&gt;&lt;/p&gt;
&lt;p&gt;Timings are relatively close since the big work is done in the decompression, that's why there isn't much difference between &lt;em&gt;Julia&lt;/em&gt; and &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I was first tempted to implement a &lt;em&gt;Julia&lt;/em&gt; wrapper over &lt;em&gt;bzlib&lt;/em&gt;, but what for? When it's so easy to invoke external commands and manipulate their input and output streams.
&lt;em&gt;Julia&lt;/em&gt; is a young language, but it's so flexible and extensible, that often I forget about it!&lt;/p&gt;</summary></entry><entry><title>"Python inheriting from str class"</title><link href="http://remusao.github.com/python-inheriting-from-str-class.html" rel="alternate"></link><updated>2014-03-05T14:50:40+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2014-03-05:python-inheriting-from-str-class.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Runtime Error&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>"Python inheriting tuple class"</title><link href="http://remusao.github.com/python-inheriting-tuple-class.html" rel="alternate"></link><updated>2014-03-05T10:15:40+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2014-03-05:python-inheriting-tuple-class.html</id><summary type="html">&lt;p&gt;I recently faced some problem while using inheritance in Python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Do something&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Call constructor from base class tuple&lt;/span&gt;
        &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# False&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

        &lt;span class="c"&gt;# True&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So what is the problem here ?&lt;/p&gt;</summary></entry><entry><title>"Installation de Julia"</title><link href="http://remusao.github.com/installation-de-julia.html" rel="alternate"></link><updated>2014-02-14T22:00:42+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2014-02-14:installation-de-julia.html</id><summary type="html">&lt;p&gt;Suite au premier article sur le langage Julia, voici un guide rapide de mise en
route de votre environnement pour utiliser le langage. Voici le plan :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compiler Julia depuis les sources&lt;/li&gt;
&lt;li&gt;Coloration syntaxique et indentation sous vim&lt;/li&gt;
&lt;li&gt;Environnement IJulia (équivalement de IPython)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Compilation&lt;/h2&gt;
&lt;p&gt;Tout d'abord compiler l'interpréteur Julia depuis les sources. Notez que si
votre distribution &lt;em&gt;linux&lt;/em&gt; dispose d'un paquet Julia dans ses dépôt ou si vous
ne désirez pas compiler Julia depuis les sources, il est toujours possible
d'installer une version pré-compilée depuis la
&lt;a href="http://julialang.org/downloads/"&gt;page téléchargement&lt;/a&gt; du site officiel.&lt;/p&gt;
&lt;p&gt;Commençons tout d'abord par récupérer les sources de Julia :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/JuliaLang/julia.git
&lt;span class="nb"&gt;cd &lt;/span&gt;julia
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ensuite, vérifiez que les dépendances suivantes sont bien disponibles sur votre
système :
&lt;em&gt; &lt;a href="http://www.gnu.org/software/make/"&gt;GNU make&lt;/a&gt;
&lt;/em&gt; &lt;a href="http://gcc.gnu.org/"&gt;gcc et g++&lt;/a&gt; (ou &lt;a href="http://clang.llvm.org/"&gt;Clang&lt;/a&gt;)
&lt;em&gt; &lt;a href="http://gcc.gnu.org/"&gt;gfortran&lt;/a&gt;
&lt;/em&gt; &lt;a href="http://git-scm.com/"&gt;git&lt;/a&gt;
&lt;em&gt; &lt;a href="http://www.perl.org/"&gt;perl&lt;/a&gt;
&lt;/em&gt; &lt;a href="http://www.gnu.org/software/wget/"&gt;wget&lt;/a&gt; (ou &lt;a href="http://curl.haxx.se/"&gt;curl&lt;/a&gt;, ou &lt;em&gt;fetch&lt;/em&gt;)
&lt;em&gt; &lt;a href="http://www.gnu.org/software/m4/"&gt;m4&lt;/a&gt;
&lt;/em&gt; &lt;a href="http://www.gnu.org/software/patch/"&gt;patch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Si tout est installé, lancez la compilation (notez que &lt;strong&gt;N&lt;/strong&gt; est à remplacer
par le nombre de cœurs dont dispose votre processeur, cela peut grandement
améliorer le temps de compilation) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make -j N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La première fois que vous compilez Julia, des dépendances vont être téléchargées
puis compilées, c'est pourquoi cela peut prendre un certains temps. La
compilation peut consommer jusqu'à &lt;em&gt;700 Mo de mémoire&lt;/em&gt; et &lt;em&gt;1.5 Go d'espace
disque&lt;/em&gt;. Les éventuelles compilations futures seront moins gourmandes.&lt;/p&gt;
&lt;p&gt;Une fois la compilation terminée, vous disposez d'un
&lt;a href="http://en.wikipedia.org/wiki/Symbolic_link"&gt;lien symbolique&lt;/a&gt; vers l'exécutable
Julia. Afin qu'il soit accessible depuis n'importe quel endroit, vous pouvez
le rajouter à votre &lt;code&gt;PATH&lt;/code&gt; (vous pouvez le rajouter dans le fichier de
configuration de votre Shell favori en remplaçant &lt;code&gt;$(pwd)&lt;/code&gt; par le chemin
absolu vers le dossier julia dans lequel se trouve le lien symbolique) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Julia intègre tout le nécessaire pour gérer l'installation, la mise à jour
et la création de packages. Ces fonctionnalités sont disponibles depuis un
prompt Julia. La première fois que vous lancez Julia, il est nécessaire
d'initialiser les packages :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;julia
julia&amp;gt; Pkg.update&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Les principales commandes disponibles sont :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pkg.update()&lt;/strong&gt; : met à jours les différents packages installés&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pkg.add("Package")&lt;/strong&gt; : installe le package &lt;em&gt;Package&lt;/em&gt; ainsi que ses éventuelles dépendances&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pkg.rm("Package")&lt;/strong&gt; : supprime le package &lt;em&gt;Package&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Coloration syntaxique et indentation&lt;/h2&gt;
&lt;p&gt;Cette explication n'est valide que pour les utilisateurs de l'éditeur
&lt;a href="http://www.vim.org/"&gt;Vim&lt;/a&gt;. Voici des explications différentes en
fonction de la manière dont vous gérez les extensions.&lt;/p&gt;
&lt;h4&gt;Pathogen&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
mkdir -p bundle &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;bundle
git clone git://github.com/JuliaLang/julia-vim.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Vundle&lt;/h4&gt;
&lt;p&gt;Ajouter un nouveau Bundle à votre &lt;code&gt;.vimrc&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Bundle &lt;span class="s1"&gt;&amp;#39;JuliaLang/julia-vim&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lancer Vim et mettre à jour vos Bundle :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:BundleInstall!
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Manuel&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git://github.com/JuliaLang/julia-vim.git
&lt;span class="nb"&gt;cd &lt;/span&gt;julia-vim
cp -R * ~/.vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voilà qui devrait vous fournir la coloration syntaxique ainsi que l'indentation
pour les fichier dont l'extension et &lt;code&gt;.jl&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;IJulia&lt;/h2&gt;
&lt;p&gt;IJulia permet d'interfacer Julia à l'environnement de développement interactif
&lt;strong&gt;IPython&lt;/strong&gt;. Cela permet notamment d'utiliser le mode &lt;strong&gt;notebook&lt;/strong&gt;, qui combine
du code, du texte, et des contenus multimédias (dessin, etc.) dans un même
environnement. Pour l'installer vous aurez besoin d'avoir sur votre système :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IPython&lt;/strong&gt; en version &lt;code&gt;1.0&lt;/code&gt; ou supérieure&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jinja.pocoo.org/docs/"&gt;Jinja2&lt;/a&gt;, &lt;a href="http://www.tornadoweb.org/en/stable/"&gt;Tornado&lt;/a&gt;, et &lt;a href="https://github.com/zeromq/pyzmq"&gt;pyzmq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ensuite il faut installer le package IJulia depuis un prompt julia :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;julia&lt;/span&gt;
&lt;span class="n"&gt;julia&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IJulia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;julia&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Une fois ceci fait, vous n'avez plus qu'à lancer IPython de la manière
suivante. Pour le mode notebook :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ipython notebook --profile julia
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Et voilà, le tour est joué. C'est tout pour cet article. Vous devriez
normalement avoir de quoi démarrer à programmer en Julia et exécuter
vos programmes. A bientôt pour de nouvelles aventures !&lt;/p&gt;
&lt;p&gt;Afin de réaliser cet articles je me suis inspiré de la documentation présente
sur les dépôts officiels de &lt;a href="https://github.com/JuliaLang/julia"&gt;Julia&lt;/a&gt;,
&lt;a href="https://github.com/JuliaLang/julia-vim"&gt;julia-vim&lt;/a&gt; et
&lt;a href="https://github.com/JuliaLang/IJulia.jl"&gt;IJulia&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>"Julia"</title><link href="http://remusao.github.com/julia.html" rel="alternate"></link><updated>2014-02-13T22:53:41+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2014-02-13:julia.html</id><summary type="html">&lt;p&gt;Aujourd'hui j'aimerais parler d'un langage de programmation que je viens de
découvrir : &lt;strong&gt;Julia&lt;/strong&gt;. Je vais donc vous le présenter succinctement et donner
mon ressenti après quelques jours d'utilisation.&lt;/p&gt;
&lt;h2&gt;Qu'est-ce que c'est ?&lt;/h2&gt;
&lt;p&gt;Le Julia est un langage :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Haut niveau&lt;/strong&gt; (&lt;em&gt;garbage collection&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamique&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interprété&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disposant d'un compilateur JIT&lt;/strong&gt; (&lt;em&gt;backend LLVM&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performant&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il s'agit d'un subtile mélange entre les langage &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;R&lt;/strong&gt; et
&lt;strong&gt;Matlab&lt;/strong&gt;. Python pour une partie de la syntaxe et les constructions élégantes du
langage (&lt;em&gt;list comprehension&lt;/em&gt;, boucles &lt;em&gt;for&lt;/em&gt;, etc.), Matlab et R pour l'intégration
des vecteurs, matrices et opérations associées dans la bibliothèque standard,
en faisant un langage particulièrement adapté pour l'analyse numérique, le
&lt;em&gt;machine learning&lt;/em&gt;, et toute autre application nécessitant des outils d'algèbre
linéaire, et des fonctions mathématiques diverses.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Dynamic type&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;          &lt;span class="c"&gt;# Int&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;toto&amp;quot;&lt;/span&gt;      &lt;span class="c"&gt;# String&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c"&gt;# Vector&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c"&gt;# 1x3 Matrix&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="c"&gt;# same 1x3 Matrix&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c"&gt;# Output&lt;/span&gt;
&lt;span class="c"&gt;# 1&lt;/span&gt;
&lt;span class="c"&gt;# 2&lt;/span&gt;
&lt;span class="c"&gt;# 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Julia dispose également des atouts suivants :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multi-méthode&lt;/strong&gt; permettant un dispatch dynamique en fonction du type des arguments passés aux fonctions&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Method declaration&lt;/span&gt;
&lt;span class="c"&gt;# foo is a function taking one argument of any type&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nf"&gt; foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c"&gt;# Shorter function declaration&lt;/span&gt;
&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Multimethod&lt;/span&gt;
&lt;span class="c"&gt;# Takes an argument of type Int (Haskelish syntax)&lt;/span&gt;
&lt;span class="n"&gt;myprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Takes an argument of type Matrix (of any type)&lt;/span&gt;
&lt;span class="n"&gt;myprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Matrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Matrix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Take an argument of type Matrix of Float64&lt;/span&gt;
&lt;span class="n"&gt;myprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Matrix&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;Float64&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Matrix of Float64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;myprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c"&gt;# First one is called&lt;/span&gt;
&lt;span class="n"&gt;myprint&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;    &lt;span class="c"&gt;# Second one is called&lt;/span&gt;
&lt;span class="n"&gt;myprint&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="mf"&gt;0.42&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c"&gt;# Third one is called&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Un système de &lt;strong&gt;template&lt;/strong&gt; pour créer du code générique&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nf"&gt; printtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Any type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c"&gt;# Takes argument of type T, in julia a type&lt;/span&gt;
&lt;span class="c"&gt;# is an object, so you can print it&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nf"&gt; printtype&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c"&gt;# Takes an argument of type T, with the constraint FloatingPoint&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nf"&gt; printtype&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="n"&gt;FloatingPoint&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Floating Point&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;printtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;printtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Des &lt;strong&gt;expressions rationnelles&lt;/strong&gt; compatible Perl&lt;/li&gt;
&lt;li&gt;Des &lt;strong&gt;macros&lt;/strong&gt; à la Lisp grâce à l’auto-iconicité du langage&lt;/li&gt;
&lt;li&gt;La possibilité de lancer des &lt;strong&gt;commandes Shell&lt;/strong&gt;, de piper, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interfaçage avec le C&lt;/strong&gt; sans bindings (simple utilisation de ccall comme une fonction)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Simple function that wrap a call to libc clock function&lt;/span&gt;
&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;ccall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(:&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;libc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kt"&gt;Int32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# Do some stuff&lt;/span&gt;

&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Duck-typing&lt;/strong&gt; mais possibilité de spécifier les types&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parallélisation&lt;/strong&gt; du code aisée en multithreading sur une unique machine ou sur un cluster (tasks, parallel for, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cet article n'a pas pour but d'être exhaustif à propos de Julia, pour plus
d'exemples je vous redirige vers le documentation officielle du langage :
&lt;a href="http://docs.julialang.org/en/latest/manual/"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Pourquoi l'utiliser ?&lt;/h2&gt;
&lt;p&gt;Julia est un langage jeune mais dynamique. Il est pour le moment peu utilisé
mais il gagne à être connu. Grâce aux avantages cités ci-dessus, c'est un
parfait candidat pour tous les projets nécessitant :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Performances&lt;/strong&gt; (compilation JIT),&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bibliothèque standard&lt;/strong&gt; très riche : &lt;em&gt;algèbre linéaire&lt;/em&gt;, &lt;em&gt;fonctions mathématiques&lt;/em&gt; diverses, etc.&lt;/li&gt;
&lt;li&gt;Rassemble les qualités de plusieurs langages bien connus (Matlab, R, Python)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il est très aisé de convertir du code Matlab ou Python vers du Julia car les
différences sont assez peu nombreuses. La manipulation de matrice est très
similaire à celle de Matlab.&lt;/p&gt;
&lt;h2&gt;Défauts de jeunesse&lt;/h2&gt;
&lt;p&gt;Néanmoins le langage dispose de quelques points faibles, sans doute liés à sa
jeunesse et au manque de projets l'utilisant. Mis à part la richesse de sa
bibliothèque standard, les packages sont encore relativement peu nombreux et
donc selon le projet vous ne trouverez pas forcément les outils nécessaires
(par exemple pour du traitement d'image, il n'existe pas de binding ou
d'équivalent à OpenCV, des packages existent mais les fonctionnalités sont
encore limitées).&lt;/p&gt;
&lt;p&gt;L'interpréteur met du temps à se lancer. Selon les ressources de la machine
que vous utilisez cela peut aller de 2-3 secondes à 30 secondes (sur mon
ordinateur portable peu puissant). Bien sûr il est possible de lancer une
session de l'interpréteur une bonne fois pour toutes et de travailler depuis
le prompt, mais cela reste gênant quand vous voulez simplement lancer un
script. Néanmoins, cela devrait s'améliorer à l'avenir, espérons-le, le
langage est encore en phase de release candidate.&lt;/p&gt;
&lt;p&gt;Voilà pour cette rapide introduction du langage Julia, cet article n'avait
pas pour but d'être un tutoriel, mais juste de faire connaitre un projet qui
semble avoir de l'avenir. Il est possible que j'utilise ce langage dans mes
prochains articles pour les démonstrations de code.&lt;/p&gt;
&lt;p&gt;Quelques ressources supplémentaires :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaLang/julia"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.julialang.org/en/latest/manual/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://julialang.org/"&gt;Site officiel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry></feed>