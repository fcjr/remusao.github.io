<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pythux</title><link href="https://remusao.github.com/" rel="alternate"></link><link href="https://remusao.github.com/feeds/all.atom.xml" rel="self"></link><id>https://remusao.github.com/</id><updated>2016-02-23T11:15:00+01:00</updated><entry><title>What's in a parser combinator?</title><link href="https://remusao.github.com/whats-in-a-parser-combinator.html" rel="alternate"></link><updated>2016-02-23T11:15:00+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2016-02-23:whats-in-a-parser-combinator.html</id><summary type="html">&lt;p&gt;Here we talk about what a parser is, how to make parsers compose, and how to make use of do notation to write more complex parsers in Haskell.&lt;/p&gt;</summary><category term="haskell"></category><category term="ihaskell"></category><category term="parser"></category><category term="combinator"></category></entry><entry><title>Feedback from Hash Code 2016 qualification round</title><link href="https://remusao.github.com/feedback-from-hash-code-2016-qualification-round.html" rel="alternate"></link><updated>2016-02-12T15:00:00+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2016-02-12:feedback-from-hash-code-2016-qualification-round.html</id><summary type="html">

&lt;p&gt;Yesterday was the qualification round for &lt;a href="https://hashcode.withgoogle.com/"&gt;Hash Code 2016&lt;/a&gt; contest, organized by
Google. I already had the opportunity to participate next, and made it to the
final round with my team.  For this new edition, the team and motivation was
the same but we thought a bit about how we could improve our organization to be
more efficient. This post is about what I will take away from this competition.
</summary><category term="hashcode"></category><category term="programming"></category><category term="contest"></category><category term="google"></category></entry><entry><title>Rubik's Cube World Records Analysis</title><link href="https://remusao.github.com/rubiks-cube-world-records-analysis.html" rel="alternate"></link><updated>2016-01-27T17:30:00+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2016-01-27:rubiks-cube-world-records-analysis.html</id><summary type="html">&lt;p&gt;Following on the recent hype around the new Rubik's Cube World Record among robots, I got interested in getting more insight into the Human World Records, which was a good opportunity to learn a bit more about Jupyter, Pandas, and Data Analysis.&lt;/p&gt;</summary><category term="rubiks cube"></category><category term="jupyter"></category><category term="ipython"></category><category term="pandas"></category><category term="numpy"></category></entry><entry><title>Learning a New Language: the Tools</title><link href="https://remusao.github.com/learning-a-new-language-the-tools.html" rel="alternate"></link><updated>2016-01-25T20:11:00+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2016-01-25:learning-a-new-language-the-tools.html</id><summary type="html">

&lt;p&gt;&lt;strong&gt;Facts&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I'm leaving for Germany in 2 months, for an undetermined duration.&lt;/li&gt;
&lt;li&gt;I don't speak German.&lt;/li&gt;
&lt;li&gt;I decided to learn it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this post, I intend to give a short description of the &lt;em&gt;tools and methodology I use to learn German&lt;/em&gt;.
Keep in mind that this is neither a "definitive guide", nor a "how to", only some notes on what I found on my journey to learning a new language (which just began).
I would be glad to get some tricks, advices and such from the comments as well.
</summary><category term="learning"></category><category term="language"></category><category term="german"></category><category term="duolingo"></category><category term="memrise"></category><category term="readlang"></category><category term="anki"></category></entry><entry><title>A tour of IHaskell extensions and integrations</title><link href="https://remusao.github.com/a-tour-of-ihaskell-extensions-and-integrations.html" rel="alternate"></link><updated>2016-01-11T00:21:00+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2016-01-11:a-tour-of-ihaskell-extensions-and-integrations.html</id><summary type="html">&lt;p&gt;In my previous post, I tried to provide a step-by-step explanation of how to install IHaskell on Ubuntu 14.04 (Should also work on other versions). Now is time to start using it! This post is an overview of various extensions you can use within IHaskell.&lt;/p&gt;</summary><category term="haskell"></category><category term="ihaskell"></category></entry><entry><title>Install IHaskell on Ubuntu 14.04 with Stack</title><link href="https://remusao.github.com/install-ihaskell-on-ubuntu-1404-with-stack.html" rel="alternate"></link><updated>2016-01-07T16:17:00+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2016-01-07:install-ihaskell-on-ubuntu-1404-with-stack.html</id><summary type="html">&lt;p&gt;In this post, we're going through the installation of IHaskell on GNU/Linux (Ubuntu 14.04 in my case, though it should be pretty similar on other ditributions) step-by-step. We'll see how the use of &lt;em&gt;Stack&lt;/em&gt; will simplify the whole process, and how to get all the dependencies right!
</summary><category term="haskell"></category><category term="stack"></category><category term="ihaskell"></category><category term="ipython"></category><category term="ubuntu"></category></entry><entry><title>[py.test] Paramaterize tests with external data</title><link href="https://remusao.github.com/pytest-paramaterize-tests-with-external-data.html" rel="alternate"></link><updated>2014-11-26T15:00:00+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2014-11-26:pytest-paramaterize-tests-with-external-data.html</id><summary type="html">&lt;p&gt;I recently began to make heavy use of &lt;a href="http://pytest.org/latest/"&gt;py.test&lt;/a&gt;
in my day-to-day Python development. It's a wonderful tool, but I won't
explain to you every features it provides and why it's awesome. Instead,
I'll explain how I managed to cleanly externalize the data used for my
tests in external files (that can be of any format: yaml, json, python
files). The idea here is to &lt;em&gt;separate the code that performs the test&lt;/em&gt;,
from the &lt;em&gt;input data used to perform the test&lt;/em&gt;.
</summary><category term="python"></category><category term="pytest"></category></entry><entry><title>Decompressing BZipped files with Julia</title><link href="https://remusao.github.com/decompressing-bzipped-files-with-julia.html" rel="alternate"></link><updated>2014-07-22T22:33:41+02:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2014-07-22:decompressing-bzipped-files-with-julia.html</id><summary type="html">&lt;p&gt;I'm currently working with Wikipedia dumps, and to save space, it's a good thing to make scripts that read directly content from (and write results to) BZipped files.
</summary><category term="julialang"></category><category term="programming"></category><category term="compression"></category></entry><entry><title>Installation de Julia</title><link href="https://remusao.github.com/installation-de-julia.html" rel="alternate"></link><updated>2014-02-14T22:00:42+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2014-02-14:installation-de-julia.html</id><summary type="html">&lt;p&gt;Suite au premier article sur le langage Julia, voici un guide rapide de mise en
route de votre environnement pour utiliser le langage.
</summary><category term="julialang"></category><category term="quickstart"></category></entry><entry><title>Julia</title><link href="https://remusao.github.com/julia.html" rel="alternate"></link><updated>2014-02-13T22:53:41+01:00</updated><author><name>Pythux</name></author><id>tag:remusao.github.com,2014-02-13:julia.html</id><summary type="html">&lt;p&gt;Aujourd'hui j'aimerais parler d'un langage de programmation que je viens de
découvrir : &lt;strong&gt;Julia&lt;/strong&gt;. Je vais donc vous le présenter succinctement et donner
mon ressenti après quelques jours d'utilisation.
</summary><category term="julialang"></category></entry></feed>